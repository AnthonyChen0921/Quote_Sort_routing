{"ast":null,"code":"const FIREBASE_DOMAIN = 'https://my-first-page-1f193-default-rtdb.firebaseio.com';\nexport async function getAllQuotes() {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quotes.');\n  }\n\n  const transformedQuotes = [];\n\n  for (const key in data) {\n    const quoteObj = {\n      id: key,\n      ...data[key]\n    };\n    transformedQuotes.push(quoteObj);\n  }\n\n  return transformedQuotes;\n}\nexport async function getSingleQuote(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes/${quoteId}.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quote.');\n  }\n\n  const loadedQuote = {\n    id: quoteId,\n    ...data\n  };\n  return loadedQuote;\n}\nexport async function addQuote(quoteData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`, {\n    method: 'POST',\n    body: JSON.stringify(quoteData),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not create quote.');\n  }\n\n  return null;\n}\nexport async function addComment(requestData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${requestData.quoteId}.json`, {\n    method: 'POST',\n    body: JSON.stringify(requestData.commentData),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not add comment.');\n  }\n\n  return {\n    commentId: data.name\n  };\n}\nexport async function getAllComments(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${quoteId}.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not get comments.');\n  }\n\n  const transformedComments = [];\n\n  for (const key in data) {\n    const commentObj = {\n      id: key,\n      ...data[key]\n    };\n    transformedComments.push(commentObj);\n  }\n\n  return transformedComments;\n}","map":{"version":3,"names":["FIREBASE_DOMAIN","getAllQuotes","response","fetch","data","json","ok","Error","message","transformedQuotes","key","quoteObj","id","push","getSingleQuote","quoteId","loadedQuote","addQuote","quoteData","method","body","JSON","stringify","headers","addComment","requestData","commentData","commentId","name","getAllComments","transformedComments","commentObj"],"sources":["C:/Users/Chene/Documents/React/Quote_Sort_routing/src/libs/api.js"],"sourcesContent":["const FIREBASE_DOMAIN = 'https://my-first-page-1f193-default-rtdb.firebaseio.com';\n\nexport async function getAllQuotes() {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quotes.');\n  }\n\n  const transformedQuotes = [];\n\n  for (const key in data) {\n    const quoteObj = {\n      id: key,\n      ...data[key],\n    };\n\n    transformedQuotes.push(quoteObj);\n  }\n\n  return transformedQuotes;\n}\n\nexport async function getSingleQuote(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes/${quoteId}.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quote.');\n  }\n\n  const loadedQuote = {\n    id: quoteId,\n    ...data,\n  };\n\n  return loadedQuote;\n}\n\nexport async function addQuote(quoteData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`, {\n    method: 'POST',\n    body: JSON.stringify(quoteData),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not create quote.');\n  }\n\n  return null;\n}\n\nexport async function addComment(requestData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${requestData.quoteId}.json`, {\n    method: 'POST',\n    body: JSON.stringify(requestData.commentData),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not add comment.');\n  }\n\n  return { commentId: data.name };\n}\n\nexport async function getAllComments(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${quoteId}.json`);\n\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not get comments.');\n  }\n\n  const transformedComments = [];\n\n  for (const key in data) {\n    const commentObj = {\n      id: key,\n      ...data[key],\n    };\n\n    transformedComments.push(commentObj);\n  }\n\n  return transformedComments;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}